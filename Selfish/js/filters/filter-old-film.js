/*!
 * @pixi/filter-old-film - v3.1.1
 * Compiled Fri, 07 Aug 2020 13:37:30 UTC
 *
 * @pixi/filter-old-film is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var __filters=function(r,n){"use strict";var t="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void)\r\n{\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}",i="varying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\nuniform vec4 filterArea;\r\nuniform vec2 dimensions;\r\n\r\nuniform float sepia;\r\nuniform float noise;\r\nuniform float noiseSize;\r\nuniform float scratch;\r\nuniform float scratchDensity;\r\nuniform float scratchWidth;\r\nuniform float vignetting;\r\nuniform float vignettingAlpha;\r\nuniform float vignettingBlur;\r\nuniform float seed;\r\n\r\nconst float SQRT_2 = 1.414213;\r\nconst vec3 SEPIA_RGB = vec3(112.0 / 255.0, 66.0 / 255.0, 20.0 / 255.0);\r\n\r\nfloat rand(vec2 co) {\r\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nvec3 Overlay(vec3 src, vec3 dst)\r\n{\r\n    // if (dst <= 0.5) then: 2 * src * dst\r\n    // if (dst > 0.5) then: 1 - 2 * (1 - dst) * (1 - src)\r\n    return vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\r\n                (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\r\n                (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)));\r\n}\r\n\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n    vec3 color = gl_FragColor.rgb;\r\n\r\n    if (sepia > 0.0)\r\n    {\r\n        float gray = (color.x + color.y + color.z) / 3.0;\r\n        vec3 grayscale = vec3(gray);\r\n\r\n        color = Overlay(SEPIA_RGB, grayscale);\r\n\r\n        color = grayscale + sepia * (color - grayscale);\r\n    }\r\n\r\n    vec2 coord = vTextureCoord * filterArea.xy / dimensions.xy;\r\n\r\n    if (vignetting > 0.0)\r\n    {\r\n        float outter = SQRT_2 - vignetting * SQRT_2;\r\n        vec2 dir = vec2(vec2(0.5, 0.5) - coord);\r\n        dir.y *= dimensions.y / dimensions.x;\r\n        float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + vignettingBlur * SQRT_2), 0.0, 1.0);\r\n        color.rgb *= darker + (1.0 - darker) * (1.0 - vignettingAlpha);\r\n    }\r\n\r\n    if (scratchDensity > seed && scratch != 0.0)\r\n    {\r\n        float phase = seed * 256.0;\r\n        float s = mod(floor(phase), 2.0);\r\n        float dist = 1.0 / scratchDensity;\r\n        float d = distance(coord, vec2(seed * dist, abs(s - seed * dist)));\r\n        if (d < seed * 0.6 + 0.4)\r\n        {\r\n            highp float period = scratchDensity * 10.0;\r\n\r\n            float xx = coord.x * period + phase;\r\n            float aa = abs(mod(xx, 0.5) * 4.0);\r\n            float bb = mod(floor(xx / 0.5), 2.0);\r\n            float yy = (1.0 - bb) * aa + bb * (2.0 - aa);\r\n\r\n            float kk = 2.0 * period;\r\n            float dw = scratchWidth / dimensions.x * (0.75 + seed);\r\n            float dh = dw * kk;\r\n\r\n            float tine = (yy - (2.0 - dh));\r\n\r\n            if (tine > 0.0) {\r\n                float _sign = sign(scratch);\r\n\r\n                tine = s * tine / period + scratch + 0.1;\r\n                tine = clamp(tine + 1.0, 0.5 + _sign * 0.5, 1.5 + _sign * 0.5);\r\n\r\n                color.rgb *= tine;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (noise > 0.0 && noiseSize > 0.0)\r\n    {\r\n        vec2 pixelCoord = vTextureCoord.xy * filterArea.xy;\r\n        pixelCoord.x = floor(pixelCoord.x / noiseSize);\r\n        pixelCoord.y = floor(pixelCoord.y / noiseSize);\r\n        // vec2 d = pixelCoord * noiseSize * vec2(1024.0 + seed * 512.0, 1024.0 - seed * 512.0);\r\n        // float _noise = snoise(d) * 0.5;\r\n        float _noise = rand(pixelCoord * noiseSize * seed) - 0.5;\r\n        color += _noise * noise;\r\n    }\r\n\r\n    gl_FragColor.rgb = color;\r\n}\r\n",e=function(r){function n(n,e){void 0===e&&(e=0),r.call(this,t,i),this.uniforms.dimensions=new Float32Array(2),"number"==typeof n?(this.seed=n,n=null):this.seed=e,Object.assign(this,{sepia:.3,noise:.3,noiseSize:1,scratch:.5,scratchDensity:.3,scratchWidth:1,vignetting:.3,vignettingAlpha:1,vignettingBlur:.3},n)}r&&(n.__proto__=r),n.prototype=Object.create(r&&r.prototype),n.prototype.constructor=n;var e={sepia:{configurable:!0},noise:{configurable:!0},noiseSize:{configurable:!0},scratch:{configurable:!0},scratchDensity:{configurable:!0},scratchWidth:{configurable:!0},vignetting:{configurable:!0},vignettingAlpha:{configurable:!0},vignettingBlur:{configurable:!0}};return n.prototype.apply=function(r,n,t,i){this.uniforms.dimensions[0]=n.filterFrame.width,this.uniforms.dimensions[1]=n.filterFrame.height,this.uniforms.seed=this.seed,r.applyFilter(this,n,t,i)},e.sepia.set=function(r){this.uniforms.sepia=r},e.sepia.get=function(){return this.uniforms.sepia},e.noise.set=function(r){this.uniforms.noise=r},e.noise.get=function(){return this.uniforms.noise},e.noiseSize.set=function(r){this.uniforms.noiseSize=r},e.noiseSize.get=function(){return this.uniforms.noiseSize},e.scratch.set=function(r){this.uniforms.scratch=r},e.scratch.get=function(){return this.uniforms.scratch},e.scratchDensity.set=function(r){this.uniforms.scratchDensity=r},e.scratchDensity.get=function(){return this.uniforms.scratchDensity},e.scratchWidth.set=function(r){this.uniforms.scratchWidth=r},e.scratchWidth.get=function(){return this.uniforms.scratchWidth},e.vignetting.set=function(r){this.uniforms.vignetting=r},e.vignetting.get=function(){return this.uniforms.vignetting},e.vignettingAlpha.set=function(r){this.uniforms.vignettingAlpha=r},e.vignettingAlpha.get=function(){return this.uniforms.vignettingAlpha},e.vignettingBlur.set=function(r){this.uniforms.vignettingBlur=r},e.vignettingBlur.get=function(){return this.uniforms.vignettingBlur},Object.defineProperties(n.prototype,e),n}(n.Filter);return r.OldFilmFilter=e,r}({},PIXI);Object.assign(PIXI.filters,__filters);
//# sourceMappingURL=filter-old-film.js.map
