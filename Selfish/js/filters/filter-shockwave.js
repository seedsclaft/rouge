/*!
 * @pixi/filter-shockwave - v3.1.1
 * Compiled Fri, 07 Aug 2020 13:37:30 UTC
 *
 * @pixi/filter-shockwave is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var __filters=function(r,e){"use strict";var t="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void)\r\n{\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}",n="varying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\nuniform vec4 filterArea;\r\nuniform vec4 filterClamp;\r\n\r\nuniform vec2 center;\r\n\r\nuniform float amplitude;\r\nuniform float wavelength;\r\n// uniform float power;\r\nuniform float brightness;\r\nuniform float speed;\r\nuniform float radius;\r\n\r\nuniform float time;\r\n\r\nconst float PI = 3.14159;\r\n\r\nvoid main()\r\n{\r\n    float halfWavelength = wavelength * 0.5 / filterArea.x;\r\n    float maxRadius = radius / filterArea.x;\r\n    float currentRadius = time * speed / filterArea.x;\r\n\r\n    float fade = 1.0;\r\n\r\n    if (maxRadius > 0.0) {\r\n        if (currentRadius > maxRadius) {\r\n            gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n            return;\r\n        }\r\n        fade = 1.0 - pow(currentRadius / maxRadius, 2.0);\r\n    }\r\n\r\n    vec2 dir = vec2(vTextureCoord - center / filterArea.xy);\r\n    dir.y *= filterArea.y / filterArea.x;\r\n    float dist = length(dir);\r\n\r\n    if (dist <= 0.0 || dist < currentRadius - halfWavelength || dist > currentRadius + halfWavelength) {\r\n        gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n        return;\r\n    }\r\n\r\n    vec2 diffUV = normalize(dir);\r\n\r\n    float diff = (dist - currentRadius) / halfWavelength;\r\n\r\n    float p = 1.0 - pow(abs(diff), 2.0);\r\n\r\n    // float powDiff = diff * pow(p, 2.0) * ( amplitude * fade );\r\n    float powDiff = 1.25 * sin(diff * PI) * p * ( amplitude * fade );\r\n\r\n    vec2 offset = diffUV * powDiff / filterArea.xy;\r\n\r\n    // Do clamp :\r\n    vec2 coord = vTextureCoord + offset;\r\n    vec2 clampedCoord = clamp(coord, filterClamp.xy, filterClamp.zw);\r\n    vec4 color = texture2D(uSampler, clampedCoord);\r\n    if (coord != clampedCoord) {\r\n        color *= max(0.0, 1.0 - length(coord - clampedCoord));\r\n    }\r\n\r\n    // No clamp :\r\n    // gl_FragColor = texture2D(uSampler, vTextureCoord + offset);\r\n\r\n    color.rgb *= 1.0 + (brightness - 1.0) * p * fade;\r\n\r\n    gl_FragColor = color;\r\n}\r\n",i=function(r){function e(e,i,o){void 0===e&&(e=[0,0]),void 0===i&&(i={}),void 0===o&&(o=0),r.call(this,t,n),this.center=e,Array.isArray(i)&&(console.warn("Deprecated Warning: ShockwaveFilter params Array has been changed to options Object."),i={}),i=Object.assign({amplitude:30,wavelength:160,brightness:1,speed:500,radius:-1},i),this.amplitude=i.amplitude,this.wavelength=i.wavelength,this.brightness=i.brightness,this.speed=i.speed,this.radius=i.radius,this.time=o}r&&(e.__proto__=r),e.prototype=Object.create(r&&r.prototype),e.prototype.constructor=e;var i={center:{configurable:!0},amplitude:{configurable:!0},wavelength:{configurable:!0},brightness:{configurable:!0},speed:{configurable:!0},radius:{configurable:!0}};return e.prototype.apply=function(r,e,t,n){this.uniforms.time=this.time,r.applyFilter(this,e,t,n)},i.center.get=function(){return this.uniforms.center},i.center.set=function(r){this.uniforms.center=r},i.amplitude.get=function(){return this.uniforms.amplitude},i.amplitude.set=function(r){this.uniforms.amplitude=r},i.wavelength.get=function(){return this.uniforms.wavelength},i.wavelength.set=function(r){this.uniforms.wavelength=r},i.brightness.get=function(){return this.uniforms.brightness},i.brightness.set=function(r){this.uniforms.brightness=r},i.speed.get=function(){return this.uniforms.speed},i.speed.set=function(r){this.uniforms.speed=r},i.radius.get=function(){return this.uniforms.radius},i.radius.set=function(r){this.uniforms.radius=r},Object.defineProperties(e.prototype,i),e}(e.Filter);return r.ShockwaveFilter=i,r}({},PIXI);Object.assign(PIXI.filters,__filters);
//# sourceMappingURL=filter-shockwave.js.map
