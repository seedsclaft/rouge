/*!
 * @pixi/filter-godray - v2.6.0
 * Compiled Sun, 13 Jan 2019 12:59:55 UTC
 *
 * @pixi/filter-godray is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
!function(r,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("pixi.js")):"function"==typeof define&&define.amd?define(["exports","pixi.js"],n):n((r=r||self).__filters={},r.PIXI)}(this,function(r,n){"use strict";var e="attribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void)\r\n{\r\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}",t="vec3 mod289(vec3 x)\r\n{\r\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\nvec4 mod289(vec4 x)\r\n{\r\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\nvec4 permute(vec4 x)\r\n{\r\n    return mod289(((x * 34.0) + 1.0) * x);\r\n}\r\nvec4 taylorInvSqrt(vec4 r)\r\n{\r\n    return 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\nvec3 fade(vec3 t)\r\n{\r\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\r\n}\r\n// Classic Perlin noise, periodic variant\r\nfloat pnoise(vec3 P, vec3 rep)\r\n{\r\n    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\r\n    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\r\n    Pi0 = mod289(Pi0);\r\n    Pi1 = mod289(Pi1);\r\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n    vec4 iz0 = Pi0.zzzz;\r\n    vec4 iz1 = Pi1.zzzz;\r\n    vec4 ixy = permute(permute(ix) + iy);\r\n    vec4 ixy0 = permute(ixy + iz0);\r\n    vec4 ixy1 = permute(ixy + iz1);\r\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\r\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n    gx0 = fract(gx0);\r\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n    vec4 sz0 = step(gz0, vec4(0.0));\r\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\r\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n    gx1 = fract(gx1);\r\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n    vec4 sz1 = step(gz1, vec4(0.0));\r\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\r\n    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\r\n    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\r\n    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\r\n    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\r\n    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\r\n    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\r\n    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\r\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n    g000 *= norm0.x;\r\n    g010 *= norm0.y;\r\n    g100 *= norm0.z;\r\n    g110 *= norm0.w;\r\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n    g001 *= norm1.x;\r\n    g011 *= norm1.y;\r\n    g101 *= norm1.z;\r\n    g111 *= norm1.w;\r\n    float n000 = dot(g000, Pf0);\r\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n    float n111 = dot(g111, Pf1);\r\n    vec3 fade_xyz = fade(Pf0);\r\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n    return 2.2 * n_xyz;\r\n}\r\nfloat turb(vec3 P, vec3 rep, float lacunarity, float gain)\r\n{\r\n    float sum = 0.0;\r\n    float sc = 1.0;\r\n    float totalgain = 1.0;\r\n    for (float i = 0.0; i < 6.0; i++)\r\n    {\r\n        sum += totalgain * pnoise(P * sc, rep);\r\n        sc *= lacunarity;\r\n        totalgain *= gain;\r\n    }\r\n    return abs(sum);\r\n}\r\n",i="varying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\nuniform vec4 filterArea;\r\nuniform vec2 dimensions;\r\n\r\nuniform vec2 light;\r\nuniform bool parallel;\r\nuniform float aspect;\r\n\r\nuniform float gain;\r\nuniform float lacunarity;\r\nuniform float time;\r\n\r\n${perlin}\r\n\r\nvoid main(void) {\r\n    vec2 coord = vTextureCoord * filterArea.xy / dimensions.xy;\r\n\r\n    float d;\r\n\r\n    if (parallel) {\r\n        float _cos = light.x;\r\n        float _sin = light.y;\r\n        d = (_cos * coord.x) + (_sin * coord.y * aspect);\r\n    } else {\r\n        float dx = coord.x - light.x / dimensions.x;\r\n        float dy = (coord.y - light.y / dimensions.y) * aspect;\r\n        float dis = sqrt(dx * dx + dy * dy) + 0.00001;\r\n        d = dy / dis;\r\n    }\r\n\r\n    vec3 dir = vec3(d, d, 0.0);\r\n\r\n    float noise = turb(dir + vec3(time, 0.0, 62.1 + time) * 0.05, vec3(480.0, 320.0, 480.0), lacunarity, gain);\r\n    noise = mix(noise, 0.0, 0.3);\r\n    //fade vertically.\r\n    vec4 mist = vec4(noise, noise, noise, 1.0) * (1.0 - coord.y);\r\n    mist.a = 1.0;\r\n\r\n    gl_FragColor = texture2D(uSampler, vTextureCoord) + mist;\r\n}\r\n",o=function(r){function o(o){r.call(this,e,i.replace("${perlin}",t)),this.uniforms.dimensions=new Float32Array(2),"number"==typeof o&&(console.warn("GodrayFilter now uses options instead of (angle, gain, lacunarity, time)"),o={angle:o},void 0!==arguments[1]&&(o.gain=arguments[1]),void 0!==arguments[2]&&(o.lacunarity=arguments[2]),void 0!==arguments[3]&&(o.time=arguments[3])),o=Object.assign({angle:30,gain:.5,lacunarity:2.5,time:0,parallel:!0,center:[0,0]},o),this._angleLight=new n.Point,this.angle=o.angle,this.gain=o.gain,this.lacunarity=o.lacunarity,this.parallel=o.parallel,this.center=o.center,this.time=o.time}r&&(o.__proto__=r),o.prototype=Object.create(r&&r.prototype),o.prototype.constructor=o;var a={angle:{configurable:!0},gain:{configurable:!0},lacunarity:{configurable:!0}};return o.prototype.apply=function(r,n,e,t){var i=n.sourceFrame,o=i.width,a=i.height;this.uniforms.light=this.parallel?this._angleLight:this.center,this.uniforms.parallel=this.parallel,this.uniforms.dimensions[0]=o,this.uniforms.dimensions[1]=a,this.uniforms.aspect=a/o,this.uniforms.time=this.time,r.applyFilter(this,n,e,t)},a.angle.get=function(){return this._angle},a.angle.set=function(r){this._angle=r;var e=r*n.DEG_TO_RAD;this._angleLight.x=Math.cos(e),this._angleLight.y=Math.sin(e)},a.gain.get=function(){return this.uniforms.gain},a.gain.set=function(r){this.uniforms.gain=r},a.lacunarity.get=function(){return this.uniforms.lacunarity},a.lacunarity.set=function(r){this.uniforms.lacunarity=r},Object.defineProperties(o.prototype,a),o}(n.Filter);r.GodrayFilter=o,Object.defineProperty(r,"__esModule",{value:!0})}),Object.assign(PIXI.filters,this?this.__filters:__filters);
//# sourceMappingURL=filter-godray.js.map
